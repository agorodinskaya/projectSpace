<h1>Planet <%= @planet.name %> </h1>
<%= @planet.description %>

<%# if @planet.image_url.present? %>

  <%# end %>


<% if @current_user.present? %>
<%= link_to 'Edit', edit_planet_path( @planet ) %>
|
<%= link_to 'Delete', planet_path( @planet ), method: 'delete' %>
|
<p>Related questions:</p>
<ul>
  <% @planet.questions.each do |q| %>
  <li>
    <%= link_to q.title, question_path( q ) %>
  </li>
  <% end %>
</ul>
<% end %>


<script src="http://localhost:3000/javascripts/lib/three.min.js"></script>
<script>
var renderer	= new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth/2, window.innerHeight/2 );
document.body.appendChild( renderer.domElement );

var onRenderFcts= [];
var scene	= new THREE.Scene();
var camera	= new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 1000 );
camera.position.z = 1.5;

var light	= new THREE.AmbientLight( 0xAAAAAA )
scene.add( light )
// var light	= new THREE.DirectionalLight( 'white', 1)
// light.position.set(5,5,5)
// light.target.position.set( 0, 0, 0 )
// scene.add( light )

var light	= new THREE.DirectionalLight( 0xcccccc, 1 )
light.position.set(5,3,5)
scene.add( light )

var geometry   = new THREE.SphereGeometry(0.5, 32, 32)
var material  = new THREE.MeshPhongMaterial({
  color: 0xFFFFFF,
  map:  THREE.ImageUtils.loadTexture('/assets/<%= @planet.name %>.jpg')
});
var earthMesh = new THREE.Mesh(geometry, material)
scene.add(earthMesh);

onRenderFcts.push(function(delta, now){
	earthMesh.rotateY( 1/8 * delta )
})


onRenderFcts.push(function(){
		renderer.render( scene, camera );
	})

  //////////////////////////////////////////////////////////////////////////////////
  	//		Camera Controls							//
  	//////////////////////////////////////////////////////////////////////////////////
  	var mouse	= {x : 0, y : 0}
  	document.addEventListener('mousemove', function(event){
  		mouse.x	= (event.clientX / window.innerWidth ) - 0.5
  		mouse.y	= (event.clientY / window.innerHeight) - 0.5
  	}, false)
  	onRenderFcts.push(function(delta, now){
  		camera.position.x += (mouse.x*5 - camera.position.x) * (delta*3)
  		camera.position.y += (mouse.y*5 - camera.position.y) * (delta*3)
  		camera.lookAt( scene.position )
  	})

	//////////////////////////////////////////////////////////////////////////////////
	//		loop runner							//
	//////////////////////////////////////////////////////////////////////////////////
	var lastTimeMsec= null
	requestAnimationFrame(function animate(nowMsec){
		// keep looping
		requestAnimationFrame( animate );
		// measure time
		lastTimeMsec	= lastTimeMsec || nowMsec-1000/60
		var deltaMsec	= Math.min(200, nowMsec - lastTimeMsec)
		lastTimeMsec	= nowMsec
		// call each update function
		onRenderFcts.forEach(function(onRenderFct){
			onRenderFct(deltaMsec/1000, nowMsec/1000)
		})
	});

</script>

<p>Moons
</p>
<ul>
  <% @planet.moons.each do |m| %>
  <li>
    <%= link_to m.name, moon_path( m ) %>
  </li>
  <% end %>
</ul>



<br>
<br>
